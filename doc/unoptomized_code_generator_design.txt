Unoptomized Code Generation Design
----------------------------------

We have designed our low level intermediate representation to be close
enough to machine code to make code generation possible by a single depth-first 
walk of the tree, generating code sequentially to append to the file.

The major design issues focus around control flow and expression evaluation:

Expression evaluation is accomplished using a stack based evaluation system.
We leave the expression tree essentially as is from the high level IR. We give
each subclass of expression an eval() method that operates recursively. Every
eval() method ends by pushing its return value onto the stack. 
	-Binary operators pop the top two values off the stack, evaluate them, and 
	push the return value back onto the stack. 
	-Literals and variables just push a value onto the stack.
	-Methods evaluate all their arguments recursively in reverse order, pushing
	them onto the stack, then move the first six arguments into registers. When
	they return, they pop the rest of the arguments off the stack and push their
	return value onto the stack.

Control flow is handled by reducing control flow statements like if, while, etc. 
into three different types of nodes: labels, jumps, and blocks. An 
block is just a subtree that can be made up of any normal calls. The labels
and jump statements structure the control flow of the program. For example, an if
statement turns into a block with the following nodes:

	Block (containing test), Jump (to label .true), Block (containing false body),
	Jump (to label .end), Label (.true), Block (containing true body), Label (.end)


Here are some other design points we came up with while hashing out
the design:

- Boolean expression trees are left as is -- we create short circuited
  code during the code generation phase

- We use a separate walk of the low level IR to convert all 
  variables to relative addresses

- We transform all -= and += operators to = by altering the expression
  tree on the right side of the expressions
  
- Char literals are converted to int literals in this stage
  
  
Low Level Ir Class Hierarchy 
----------------------------

llFile

llArrayDec
llGlobalDec

llVarDec

llLabel
llJump
llPush
llPop


llReturn

llAssign

llEnvironment

llExpression
  llBinOp
  llMethodCall
  llBoolLiteral
  llIntLiteral
  llVarAccess
  llArrayAccess
  llUnaryNeg
  llUnaryNot

llStringLiteral

llFunctionCall
  llCallout
  llMethodCall
  


Conversion from Low-Level IR to Assembly Code
---------------------------------------------

* additional primitives like Jump, Label, etc. might be used
*   these primitives make up the fields of the IR nodes
* preserve variable and method identifiers
* reuse/create symbol tables for determining where ids refer to in memory
*   do 2nd pass through low-level IR to determine how to resolve ids

Class
    GlobalVar
        push 0 into some address
    Array
        push 0 into some address xN
    Method
        label method
        process decls and stmts in method block

(Method) Block
    LocalVar
        push 0 into some address
    Assign
        get address of location
        evaluate the expression
        pop expression result from stack and store in %r10
        save value of %r10 to address
    PlusAssign
    MinusAssign
        given x += expr:
            convert to x = x + expr
    IfStmt
        evaluate condition
        if (condition)
            jump to .true_block
        else
            fall through to .false_block
        .true_block:
            check contents
            jump to .if_end
        .false_block:
            check contents
            jump to .if_end
        .if_end:
            = the next stmt
    ForStmt
        evaluate init expr
        store result in counter
        .for_begin:
            if (counter >= end_expr)
                jump to .for_end
            else
                fall through to .for_block
        .for_block:
            check contents
            counter++
            jump to .for_begin
        .for_end:
            = the next stmt
    WhileStmt
        .while_begin:
            if (condition == false)
                jump to .while_end
            else
                fall through to .while_block
        .while_block:
            check contents
            jump to .while_begin
        .while_end:
            = the next stmt
    BreakStmt
        inside a for loop:
            jump to .for_end
        inside a while loop:
            jump to .while_end
    
    ContinueStmt
        inside a for loop:
            jump to .for_begin
        inside a while loop:
            jump to .while_begin
            
    ReturnStmt
        if (return_expr != null)
            evaluate return_expr
            store in %rax
        RETURN
    
    BlockStmt
        affects identifier lookup in symbol tables,
        but not the structure of the assembly itself

    MethodCallStmt
        used when the stmt is NOT part of an expression
        CALL the method (eval args, change bp/sp, etc.)
        if (currently_evaluating_expr)
            read %rax, push result onto stack
        
    CalloutStmt
        eval the calloutargs
        go through the motions
        if (currently_evaluating_expr)
            read %rax, push result onto stack

VarLocation
    check symbol table, get address
    if (currently_evaluating_expr)
        read address, push result onto stack
    
ArrayLocation
    evaluate array index expr
    check symbol table, get array size
    if (index out of bounds)
        jump to .error_array_bounds
    else
        check symbol table, get address
    if (currently_evaluating_expr)
        read address, push result onto stack

(do expression evaluation by in-order tree traversal)        
BinaryExpr
    recursively evaluate left_expr
    recursively evaluate right_expr
    pop left_expr and right_expr from stack and store in %r10 and %r11
    evaulate expression
    push result onto stack

UnaryExpr
    recursively evaluate expr
    pop expr from stack and store in %r10
    apply operation
    push result onto stack

Literal
    push value of literal onto stack
    push result onto stack


 
 
