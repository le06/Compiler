abstract IrNode
{
    int line; // i.e. line number
}

IrClassDecl
{
    ArrayList<IrMemberDecl> members; // order matters! need abstract members.
}

IrMemberDecl
    IrFieldDecl
        IrGlobalDecl
        {
            IrVarDecl var;
        }
        IrArrayDecl
        {
            IrType type;
            IrIdentifier id;
            IrIntLiteral array_size;
        }
    IrMethodDecl
    {
        IrReturnType return_type;
        IrIdentifier id;
        ArrayList<IrVarDecl> args;
        IrBlock block;
    }

IrVarDecl
{
    IrType type;
    IrIdentifier id;
}

IrBlock // ordering between vars and stmts enforced at parse-time
{
    ArrayList<IrVarDecl> var_decls;
    ArrayList<IrStatement> statements;
}

IrStatement
    IrAssignStmt
    {
        IrLocation lhs;
        IrExpression rhs;
    }
    IrPlusAssignStmt
    {
        IrLocation lhs;
        IrExpression rhs;
    }
    IrMinusAssignStmt
    {
        IrLocation lhs;
        IrExpression rhs;
    }
    IrContinueStmt
    {
    }
    IrBreakStmt
    {
    }
    IrReturnStmt
    {
        IrExpression return_expr;
    }
    IrWhileSmt
    {
        IrExpression condition;
        IrBlock block;
    }
    IrForStmt
    {
        IrIdentifier counter;
        IrExpression start_value;
        IrExpression stop_value;
        IrBlock block;
    }
    IrIfStmt
    {
        IfExpression condition;
        IrBlock true_block;
        IrBlock false_block;
    }
    IrBlock
    {
    }
    IrInvokeStmt
        IrMethodCallStmt
        {
            IrIdentifier method_name;
            ArrayList<IrExpression> args;
        }
        IrCalloutStmt
        {
            IrStringLiteral function_name;
            ArrayList<IrCalloutArg> args;
        }

IrCalloutArg
    IrStringArg
    {
        IrStringLiteral arg;
    }
    IrExprArg
    {
        IrExpression arg;
    }

IrLocation
    IrVarLocation
    {
        IrIdentifier id;
    }
    IrArrayLocation
    {
        IrIdentifier id;
        IrExpression index;
    }

IrExpression
    IrLocationExpr
    {
        IrLocation location;
    }
    IrCallExpr
        IrMethodCallExpr
        {
            IrMethodCallStmt call;
        }
        IrCalloutExpr
        {
            IrCalloutStmt call;
        }
    IrLiteralExpr
    {
        IrLiteral literal;
    }
    IrBinopExpr
    {
        IrBinOperator operator;
        IrExpression lhs;
        IrExpression rhs;
    }
    IrUnopExpr
    {
        IrUnaryOperator operator;
        IrExpression expr;
    }

// enum type? string type? child nodes?
IrBinOperator
{
    int operator;
}

IrUnaryOperator
{
    int operator;
}

// same question.
IrType
{
    int type;
}
IrReturnType
{
    int type;
}

IrIdentifier
{
    String id;
}

IrLiteral
    IrIntLiteral
    {
        int literal;
    }
    IrCharLiteral
    {
        char literal;
    }
    IrBoolLiteral;
    {
        boolean literal;
    }

IrStringLiteral
{
    String literal;
}
