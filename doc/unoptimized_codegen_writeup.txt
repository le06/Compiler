Overview
--------
For the most part, we kept to the original design, which can be found
in the same directory as this document under the filename
unoptomized_code_generator_design.txt, with a few deviations/additions.
The main deviations in terms of design are listed here

Deviations from/additions to original design doc:
 - Char literals are converted to int literals in ll rep
 
Interesting Implementation Issues
---------------------------------
 - In converting from the high level to low level Ir, there were some
   aspects that were more suited to a recursive call, and some that were
   more suited to a visitor pattern, so we used a hybrid design. The low
   level Ir is generated using the recursive call getLLRep implemented in
   every IrNode. Then, the LabelNamer visitor ensures that every label in
   the file is unique. Finally, the AddressAssigner visitor assigns stack
   locations to all of the allocated variables for each method.
   
 - Break/Continue statements were an interesting issue because they need
   to bind to the closest for or while statement around them. Because of 
   the tree structure of the Ir, there must be some sort of state kept 
   about the closest for/while block, and the appropriate labels to which
   a break/continue should jump. This was accomplished by passing the 
   appropriate labels as parameters to the getLLRep function, and setting
   these parameters whenever a new for or while is encountered.
 
 
 
Division of Work
----------------
In a similar division of work to the semantic checker,
Patrick (patrickv) focused on converting the high level IR to the
low level IR, and Jae (jaechung) worked on turning the low level IR
into actual ASM.

We worked together on designing the low level Ir, and on the overall 
design. 

Known Issues
------------
None at this time