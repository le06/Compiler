// $ANTLR 2.7.7 (2006-11-01): "parser.g" -> "DecafParser.java"$

package edu.mit.compilers.grammar;

public interface DecafParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int TK_true = 4;
	int TK_false = 5;
	int TK_boolean = 6;
	int TK_break = 7;
	int TK_callout = 8;
	int TK_class = 9;
	int TK_continue = 10;
	int TK_else = 11;
	int TK_for = 12;
	int TK_if = 13;
	int TK_int = 14;
	int TK_return = 15;
	int TK_void = 16;
	int TK_while = 17;
	int TK_Program = 18;
	int LCURLY = 19;
	int RCURLY = 20;
	int LSQUARE = 21;
	int RSQUARE = 22;
	int LPAREN = 23;
	int RPAREN = 24;
	int WS_ = 25;
	int SL_COMMENT = 26;
	int ML_COMMENT = 27;
	int NOT = 28;
	int MINUS = 29;
	int MUL = 30;
	int DIV = 31;
	int MOD = 32;
	int PLUS = 33;
	int LT = 34;
	int GT = 35;
	int LEQ = 36;
	int GEQ = 37;
	int EQ = 38;
	int NEQ = 39;
	int AND = 40;
	int OR = 41;
	int ASSIGN = 42;
	int INC_ASSIGN = 43;
	int DEC_ASSIGN = 44;
	int COMMA = 45;
	int SEMI = 46;
	int ID = 47;
	int DEC_LITERAL = 48;
	int HEX_LITERAL = 49;
	int BIN_LITERAL = 50;
	int ALPHA_NUM = 51;
	int ALPHA = 52;
	int DIGIT = 53;
	int HEX_DIGIT = 54;
	int BIN_DIGIT = 55;
	int CHAR = 56;
	int STRING = 57;
	int ESC = 58;
	int CHARLIT = 59;
	int BLOCK = 60;
	int BLOCK_LINE = 61;
	int VAR_DECL = 62;
	int METHOD = 63;
	int FIELD = 64;
	int ARRAY = 65;
	int ARRAY_ACCESS = 66;
	int FN_CALL = 67;
	int FOR_INIT = 68;
	int PARAM = 69;
}
